- Philosphy of my config
  - Features
    - Terminal based
      Because it's faster and more stable
    - Literate config
      Self-documented + easy to discover new packages
    - Cross-platforms
      Because you never know what job you will get
    - VI style of editing
      Because VI is unix compliant therefore universal
    - Real time
      Because that's how it's supposed to be
      No need to be faster than that
  - Editingo
    - Visual
      - When you can visualize it you have more power over it
    - Interactive
      - Don't edit in the dark
      - It's a conversation
    - Don't seek things let them come to you
      - Inverse responsabilities
  - Purpose
    Have a lightweight and compatible config I could use on any hardware
* Better Emacs
** Better garbage collection
#+BEGIN_SRC emacs-lisp
  (use-package gcmh
  :ensure t
    :config
    (gcmh-mode 1))
#+END_SRC
* App
** Programming
*** Languages
**** Full-stack
***** Web
**** Python
     #+BEGIN_SRC emacs-lisp
     (use-package python-mode
  :ensure nil
  :after flycheck
  :mode "\\.py\\'"
  :custom
  (python-indent-offset 4)
  (flycheck-python-pycompile-executable "python3")
  (python-shell-interpreter "python3"))
     #+END_SRC
*** Utils
**** Linting
     #+BEGIN_SRC emacs-lisp
       (use-package flycheck
	 :defer t
	 :diminish
	 :hook ((prog-mode markdown-mode) . flycheck-mode)
	 :custom
	 (flycheck-global-modes
	  '(not text-mode outline-mode fundamental-mode org-mode
		diff-mode shell-mode eshell-mode term-mode))
	 (flycheck-emacs-lisp-load-path 'inherit)
	 (flycheck-indication-mode 'right-fringe)
	 :init
	 (use-package flycheck-grammarly :defer t)
	 :config
	 (when (fboundp 'define-fringe-bitmap)
	   (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
	     [16 48 112 240 112 48 16] nil nil 'center))
	 (flycheck-add-mode 'javascript-eslint 'js-mode)
	 (flycheck-add-mode 'typescript-tslint 'rjsx-mode))
     #+END_SRC
*** Programs
**** TODO RestClient
*** LSP
     #+BEGIN_SRC emacs-lisp
       (use-package lsp-mode
	 :defer t
	 :commands lsp
	 :custom
	 (lsp-auto-guess-root nil)
	 (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
	 (lsp-file-watch-threshold 2000)
	 (read-process-output-max (* 1024 1024))
	 (lsp-eldoc-hook nil)
	 :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
	 :hook ((java-mode python-mode go-mode
		 js-mode js2-mode typescript-mode web-mode
		 c-mode c++-mode objc-mode) . lsp))
     #+END_SRC
**** LSP UI
     #+BEGIN_SRC emacs-lisp
       (use-package lsp-ui
	 :after lsp-mode
	 :diminish
	 :commands lsp-ui-mode
	 :custom-face
	 (lsp-ui-doc-background ((t (:background nil))))
	 (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
	 :bind
	 (:map lsp-ui-mode-map
	       ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
	       ([remap xref-find-references] . lsp-ui-peek-find-references)
	       ("C-c u" . lsp-ui-imenu)
	       ("M-i" . lsp-ui-doc-focus-frame))
	 (:map lsp-mode-map
	       ("M-n" . forward-paragraph)
	       ("M-p" . backward-paragraph))
	 :custom
	 (lsp-ui-doc-header t)
	 (lsp-ui-doc-include-signature t)
	 (lsp-ui-doc-border (face-foreground 'default))
	 (lsp-ui-sideline-enable nil)
	 (lsp-ui-sideline-ignore-duplicate t)
	 (lsp-ui-sideline-show-code-actions nil)
	 :config
	 ;; Use lsp-ui-doc-webkit only in GUI
	 (if (display-graphic-p)
	     (setq lsp-ui-doc-use-webkit t))
	 ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
	 ;; https://github.com/emacs-lsp/lsp-ui/issues/243
	 (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
	   (setq mode-line-format nil)))
     #+END_SRC
**** DAP
     #+BEGIN_SRC emacs-lisp
(use-package dap-mode
  :diminish
  :bind
  (:map dap-mode-map
        (("<f12>" . dap-debug)
         ("<f8>" . dap-continue)
         ("<f9>" . dap-next)
         ("<M-f11>" . dap-step-in)
         ("C-M-<f11>" . dap-step-out)
         ("<f7>" . dap-breakpoint-toggle))))
     #+END_SRC
** Org-Mode
*** Indentation
    #+BEGIN_SRC emacs-lisp
    (setq org-indent-indentation-per-level 1)
(setq org-adapt-indentation nil)
(setq org-hide-leading-stars 't)
    #+END_SRC
*** Hide details
    #+BEGIN_SRC emacs-lisp
    (setq org-hide-emphasis-markers t)

    #+END_SRC
*** Details
    #+BEGIN_SRC emacs-lisp
    (customize-set-variable 'org-blank-before-new-entry 
                        '((heading . nil)
                          (plain-list-item . nil)))
(setq org-cycle-separator-lines 1)
    #+END_SRC
** Magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:bind (("C-x g" . magit)))
    #+END_SRC
** elfeed
    #+BEGIN_SRC emacs-lisp
      (use-package elfeed) 

      (use-package elfeed-org
	:config
	(defvar elfeed-feeds-alist
	  '(("~/../../Documents/ecole/org-mode/elfeedMain.org"))))

      (use-package elfeed-web)
    #+END_SRC
* Editing
** EVIL
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :config
       (evil-mode 1))
   #+END_SRC
*** M-X
   #+BEGIN_SRC emacs-lisp
     ;; 
   #+END_SRC
*** evil-magit
   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit
       :ensure t)
   #+END_SRC
*** Keyboard bindings
   #+BEGIN_SRC emacs-lisp
(use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode t)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "s s" 'swiper
      "f f" 'counsel-find-file
      "f s" 'save-buffer
      "g g" 'magit
      "f U" 'undo-tree-visualize
      "<SPC>" 'counsel-M-x))
   #+END_SRC
*** org
   #+BEGIN_SRC emacs-lisp
(use-package evil-org
    :ensure t
    :config
    (evil-org-set-key-theme
	  '(textobjects insert navigation additional shift todo heading))
    (add-hook 'org-mode-hook (lambda () (evil-org-mode))))
   #+END_SRC
*** else
   #+BEGIN_SRC emacs-lisp
(use-package evil-surround
    :ensure t
    :config (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t)

  
   #+END_SRC
** History
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :config
       (global-undo-tree-mode 1))
   #+END_SRC
** Completion
*** IVY/counsel/swiper
**** IVY
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
	:config
	(ivy-mode 1))
    #+END_SRC
***** TODO IVY rich
       (use-package ivy-rich
	 :config
	 (ivy-rich-mode 1))
**** Counsel
    #+BEGIN_SRC emacs-lisp
	    (use-package counsel
	      :config
	      (evil-define-key 'normal 'global (kbd "<leader>SPC") 'counsel-M-x))
    #+END_SRC
*** Snippets
    #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
  :diminish yas-minor-mode
  :init
  (use-package yasnippet-snippets :after yasnippet)
  :hook ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
  :bind
  (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
  (:map yas-keymap
        (("TAB" . smarter-yas-expand-next-field)
         ([(tab)] . smarter-yas-expand-next-field)))
  :config
  (yas-reload-all)
  (defun smarter-yas-expand-next-field ()
    "Try to `yas-expand' then `yas-next-field' at current cursor position."
    (interactive)
    (let ((old-point (point))
          (old-tick (buffer-chars-modified-tick)))
      (yas-expand)
      (when (and (eq old-point (point))
                 (eq old-tick (buffer-chars-modified-tick)))
        (ignore-errors (yas-next-field))))))
    #+END_SRC
*** Company
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:custom
	(company-show-numbers t)
	(company-idle-delay 0)
	:config
	(global-company-mode 1))
    #+END_SRC
*** TODO Abbrev
*** TODO dabbrev
** Navigation
*** Jump
   #+BEGIN_SRC emacs-lisp
   (use-package avy
       :custom
       (global-set-key (kbd "C-:") 'avy-goto-word-1))
   #+END_SRC
*** TODO Outline
*** TODO Window management
*** Search
**** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind (("C-s" . swiper)))
#+END_SRC

**** ripgrep
** Writing
   - [[https://explog.in/notes/writingsetup.html][write-up]]
*** Auto-fill
    #+BEGIN_SRC emacs-lisp
(add-hook
 'text-mode-hook
 'auto-fill-mode)
    #+END_SRC
*** Center text
    #+BEGIN_SRC emacs-lisp
(add-hook
 'text-mode-hook
 'olivetti-mode)
    #+END_SRC
** File short cuts
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-.") (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
    #+END_SRC
* Window management
** Winner-mode
   #+BEGIN_SRC emacs-lisp
     (winner-mode t)
     (evil-leader/set-key
       "w u" 'winner-undo
       "w r" 'winner-redo)
   #+END_SRC
* AESTHETIC
** Line numbers
   #+BEGIN_SRC emacs-lisp
   (display-line-numbers-mode 1)
   (setq display-line-numbers-type 'relative)
   #+END_SRC
** Winum
   #+BEGIN_SRC emacs-lisp
     (use-package winum
       :init
       (setq winum-keymap
	     (let ((map (make-sparse-keymap)))
	       (define-key map (kbd "C-`") 'winum-select-window-by-number)
	       (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
	       (define-key map (kbd "M-1") 'winum-select-window-1)
	       (define-key map (kbd "M-2") 'winum-select-window-2)
	       (define-key map (kbd "M-3") 'winum-select-window-3)
	       (define-key map (kbd "M-4") 'winum-select-window-4)
	       (define-key map (kbd "M-5") 'winum-select-window-5)
	       (define-key map (kbd "M-6") 'winum-select-window-6)
	       (define-key map (kbd "M-7") 'winum-select-window-7)
	       (define-key map (kbd "M-8") 'winum-select-window-8)
	       map))
       :config
       (winum-mode 1))
   #+END_SRC
** Elegant emacs
*** Theme
#+BEGIN_SRC emacs-lisp 

(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-solarized-dark t)
  ;; or for tremacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+END_SRC
*** Modeline
*** Font
#+BEGIN_SRC emacs-lisp 
(set-face-font 'default "Roboto Mono Light 10")
#+END_SRC
*** Remove annoying things
#+BEGIN_SRC emacs-lisp 
(set-default 'cursor-type  '(bar . 1))
(blink-cursor-mode 0)
;; remove sound
(setq visible-bell t)
(setq ring-bell-function 'ignore)
#+END_SRC
*** Highligth
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC
*** TODO Modeline
#+BEGIN_SRC emacs-lisp

#+END_SRC
