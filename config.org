* Better Emacs
- Better defaults
** bind-file
    #+BEGIN_SRC emacs-lisp
      (defmacro bind-file (binding file)
	`(global-set-key (kbd ,binding) (lambda () (interactive) (find-file ,file))))
    #+END_SRC
** Hydra
    #+BEGIN_SRC emacs-lisp
      (use-package hydra
  :straight t)
    #+END_SRC
** Helpful
    #+BEGIN_SRC emacs-lisp
      (use-package helpful
	:straight (helpful :type git :host github :repo "Wilfred/helpful")
	:config 
	(global-set-key (kbd "C-h f") #'helpful-callable)
	(global-set-key (kbd "C-h v") #'helpful-variable)
	(global-set-key (kbd "C-h k") #'helpful-key))
    #+END_SRC
* App
** Programming
*** Languages
**** Python
     #+BEGIN_SRC emacs-lisp
     (use-package python-mode
     :straight t
  :ensure nil
  :after flycheck
  :mode "\\.py\\'"
  :custom
  (python-indent-offset 4)
  (flycheck-python-pycompile-executable "python3")
  (python-shell-interpreter "python3"))
     #+END_SRC
**** octave
     #+BEGIN_SRC emacs-lisp
     (use-package ac-octave
  :straight t)
     #+END_SRC
*** Utils
**** Linting
     #+BEGIN_SRC emacs-lisp
       (use-package flycheck
       :straight t
	 :defer t
	 :diminish
	 :hook ((prog-mode markdown-mode) . flycheck-mode)
	 :custom
	 (flycheck-global-modes
	  '(not text-mode outline-mode fundamental-mode org-mode
		diff-mode shell-mode eshell-mode term-mode))
	 (flycheck-emacs-lisp-load-path 'inherit)
	 (flycheck-indication-mode 'right-fringe)
	 :init
	 (use-package flycheck-grammarly :defer t)
  :straight t
	 :config
	 (when (fboundp 'define-fringe-bitmap)
	   (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
	     [16 48 112 240 112 48 16] nil nil 'center))
	 (flycheck-add-mode 'javascript-eslint 'js-mode)
	 (flycheck-add-mode 'typescript-tslint 'rjsx-mode))
     #+END_SRC
**** imenu-list
     #+BEGIN_SRC emacs-lisp
       (use-package imenu-list
	 :straight t
	 :config
	 (evil-leader/set-key
	   "f m" 'imenu-list))
     #+END_SRC
*** Programs
**** TODO RestClient
*** LSP
     #+BEGIN_SRC emacs-lisp
       (use-package lsp-mode
	 :straight t
	 :defer t
	 :commands lsp
	 :custom
	 (lsp-auto-guess-root nil)
	 (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
	 (lsp-file-watch-threshold 2000)
	 (read-process-output-max (* 1024 1024))
	 (lsp-eldoc-hook nil)
	 :hook ((java-mode python-mode go-mode
			   js-mode js2-mode typescript-mode web-mode
			   c-mode c++-mode objc-mode) . lsp))
     #+END_SRC
**** LSP UI
     #+BEGIN_SRC emacs-lisp
       (use-package lsp-ui
	 :straight t
	 :after lsp-mode
	 :diminish
	 :commands lsp-ui-mode
	 :custom-face
	 (lsp-ui-doc-background ((t (:background nil))))
	 (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
	 :custom
	 (lsp-ui-doc-header t)
	 (lsp-ui-doc-include-signature t)
	 (lsp-ui-doc-border (face-foreground 'default))
	 (lsp-ui-sideline-enable nil)
	 (lsp-ui-sideline-ignore-duplicate t)
	 (lsp-ui-sideline-show-code-actions nil)
	 :config
	 ;; Use lsp-ui-doc-webkit only in GUI
	 (if (display-graphic-p)
	     (setq lsp-ui-doc-use-webkit t))
	 ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
	 ;; https://github.com/emacs-lsp/lsp-ui/issues/243
	 (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
	   (setq mode-line-format nil)))
     #+END_SRC
**** DAP
     #+BEGIN_SRC emacs-lisp
       (use-package dap-mode
	 :straight t
	 :diminish
	 :bind
	 (:map dap-mode-map
	       (("<f12>" . dap-debug)
		("<f8>" . dap-continue)
		("<f9>" . dap-next)
		("<M-f11>" . dap-step-in)
		("C-M-<f11>" . dap-step-out)
		("<f7>" . dap-breakpoint-toggle))))
     #+END_SRC
** Magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:straight t
	:bind (("C-x g" . magit)))
    #+END_SRC
** Org-Mode
*** Indentation
    #+BEGIN_SRC emacs-lisp
      (setq org-indent-indentation-per-level 1)
      (setq org-adapt-indentation nil)
      (setq org-hide-leading-stars 't)
    #+END_SRC
*** Hide details
    #+BEGIN_SRC emacs-lisp
    (setq org-hide-emphasis-markers t)
    #+END_SRC
*** Details
    #+BEGIN_SRC emacs-lisp
      (customize-set-variable 'org-blank-before-new-entry 
			      '((heading . nil)
				(plain-list-item . nil)))
      (setq org-cycle-separator-lines 1)
    #+END_SRC
*** Org-main
    #+BEGIN_SRC emacs-lisp
      (setq org-main-dir "~/../../Documents/ecole/org-mode/"
	    org-main-file (concat org-main-dir "main.org"))
    #+END_SRC
**** bind file
    #+BEGIN_SRC emacs-lisp
      (bind-file "C-c o" org-main-file)
    #+END_SRC
*** Agenda
    #+BEGIN_SRC emacs-lisp
      ;; (use-package elegant-agenda-mode
      ;;   :straight (elegant-agenda-mode :type git :host github :repo "justincbarclay/elegant-agenda-mode")
      ;;   :hook org-agenda-mode-hook)
    #+END_SRC
** elfeed
    #+BEGIN_SRC emacs-lisp
      (use-package elfeed
	:straight t) 

      (use-package elfeed-org
	:straight t
	:config
	(defvar elfeed-feeds-alist
	  (list (concat org-main-dir "elfeedMain.org"))))

      (use-package elfeed-web
	:straight t)
    #+END_SRC
** eww
*** open-link-with-eww
    #+BEGIN_SRC emacs-lisp
      (setq browse-url-browser-function
	    '(("wikipedia\\.org" . eww-browse-url)
	      ("github" . eww-browse-url) ;; TODO remoe the clutter
	      ("." . browse-url-default-browser)))
    #+END_SRC
*** TODO improve github go directly to the README.md
- CURRENT_URL + /blob/master/README.md
  - User raw url
    #+BEGIN_SRC emacs-lisp
      (defun eww-goto-readme ()
	(eww-browse-url (concat (plist-get eww-data :url) "/blob/master/README.md")))
    #+END_SRC
*** Preview
**** Org-mode
    #+BEGIN_SRC emacs-lisp
      (use-package org-preview-html
	:straight t)
    #+END_SRC
**** Markdown
    #+BEGIN_SRC emacs-lisp
      (use-package markdown-preview-eww
	:straight t)
    #+END_SRC
* Editingk
** EVIL
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :straight t
       :config
       (evil-mode 1))
   #+END_SRC
*** evil-magit
   #+BEGIN_SRC emacs-lisp
     (use-package evil-magit
       :straight t
       :ensure t)
   #+END_SRC
*** Keyboard bindings
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :straight t
       :ensure t
       :config
       (global-evil-leader-mode t)
       (evil-leader/set-leader "<SPC>")
       (evil-leader/set-key
	 "s s" 'swiper
	 "f f" 'counsel-find-file
	 "f s" 'save-buffer
	 "g g" 'magit
	 "f U" 'undo-tree-visualize
	 "<SPC>" 'counsel-M-x))
   #+END_SRC
*** org
   #+BEGIN_SRC emacs-lisp
     (use-package evil-org
       :straight t
       :ensure t
       :config
       (evil-org-set-key-theme
	'(textobjects insert navigation additional shift todo heading))
       (add-hook 'org-mode-hook (lambda () (evil-org-mode))))
   #+END_SRC
*** else
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :straight t
       :ensure t
       :config (global-evil-surround-mode))

     (use-package evil-indent-textobject
       :straight t
       :ensure t)
   #+END_SRC
** History
   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :straight t
       :config
       (global-undo-tree-mode 1))
   #+END_SRC
** Completion
*** IVY/counsel/swiper
**** IVY
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
	:straight t
	:config
	(ivy-mode 1))
    #+END_SRC
***** TODO IVY rich
       (use-package ivy-rich
  :straight t
	 :config
	 (ivy-rich-mode 1))
**** Counsel
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
	:straight t)
    #+END_SRC
*** Snippets
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:diminish yas-minor-mode
	:init
	(use-package yasnippet-snippets :after yasnippet)
	:hook ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
	:bind
	(:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
	(:map yas-keymap
	      (("TAB" . smarter-yas-expand-next-field)
	       ([(tab)] . smarter-yas-expand-next-field)))
	:config
	(yas-reload-all)
	(defun smarter-yas-expand-next-field ()
	  "Try to `yas-expand' then `yas-next-field' at current cursor position."
	  (interactive)
	  (let ((old-point (point))
		(old-tick (buffer-chars-modified-tick)))
	    (yas-expand)
	    (when (and (eq old-point (point))
		       (eq old-tick (buffer-chars-modified-tick)))
	      (ignore-errors (yas-next-field))))))
    #+END_SRC
*** Company
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:straight t
	:ensure t
	:custom
	(company-show-numbers t)
	(company-idle-delay 0)
	:config
	(global-company-mode 1))
    #+END_SRC
**** Company-lsp 
    #+BEGIN_SRC emacs-lisp
      (use-package company-lsp
	:straight t
	:ensure t
	:config
	(push 'company-lsp company-backends))
    #+END_SRC
**** tabNine (TEST)
    #+BEGIN_SRC emacs-lisp
      ;; (use-package company-tabnine
      ;;   :straight t
      ;;   :ensure t
      ;;   :config
      ;;   (add-to-list 'company-backends #'company-tabnine))
    #+END_SRC
*** TODO Abbrev
*** TODO dabbrev
** Navigation
*** Jump
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :straight t
       :custom
       (evil-leader/set-key 
	 "j w" 'avy-goto-word-1
	 "j l" 'avy-goto-line))
   #+END_SRC
*** TODO Outline
*** Window management
   #+BEGIN_SRC emacs-lisp
     ;; (defhydra hydra-zoom (global-map "")
     ;;   "window"
     ;;   ("v" split-window-rigth "vertical")
     ;;   ("s" split-window-below "horizontal"))
   #+END_SRC

**** Winum
   #+BEGIN_SRC emacs-lisp
     (use-package winum
       :straight t
       :config
       (winum-mode 1)
       (evil-leader/set-key 
	 "0" 'winum-select-window-0-or-10
	 "1" 'winum-select-window-1
	 "2" 'winum-select-window-2
	 "3" 'winum-select-window-3
	 "4" 'winum-select-window-4
	 "5" 'winum-select-window-5
	 "6" 'winum-select-window-6
	 "7" 'winum-select-window-7
	 "8" 'winum-select-window-8))
   #+END_SRC
*** Search
**** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :straight t
    :bind (("C-s" . swiper)))
#+END_SRC

**** ripgrep
** Writing
   - [[https://explog.in/notes/writingsetup.html][write-up]]
*** Auto-fill
    #+BEGIN_SRC emacs-lisp
      (add-hook
       'text-mode-hook
       'auto-fill-mode)
    #+END_SRC
*** Center text
    #+BEGIN_SRC emacs-lisp
      (add-hook
       'text-mode-hook
       'olivetti-mode)
    #+END_SRC
** File short cuts
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x C-.") (lambda () (interactive) (find-file "~/.emacs.d/config.org")))
    #+END_SRC
* AESTHETIC
** Line numbers
   #+BEGIN_SRC emacs-lisp
     (setq display-line-numbers-type 'relative)
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC
** Elegant emacs
*** Theme
#+BEGIN_SRC emacs-lisp 
  (use-package doom-themes
    :straight t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-solarized-dark t)
    ;; or for tremacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC
*** Modeline
*** Font
#+BEGIN_SRC emacs-lisp 
  (set-face-font 'default "Roboto Mono Light 10")
#+END_SRC
*** Remove annoying things
#+BEGIN_SRC emacs-lisp 
  (set-default 'cursor-type  '(bar . 1))
  (blink-cursor-mode 0)
  ;; remove sound
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)
#+END_SRC
*** Highligth
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
*** Modeline
#+BEGIN_SRC emacs-lisp
  (set-fontset-font "fontset-default"  '(#x2600 . #x26ff) "Fira Code 16")

  (define-key mode-line-major-mode-keymap [header-line]
    (lookup-key mode-line-major-mode-keymap [mode-line]))

  (defun mode-line-render (left right)
    "Function to render the modeline LEFT to RIGHT."
    (let* ((available-width (- (window-width) (length left) )))
      (format (format "%%s %%%ds" available-width) left right)))

  (setq-default mode-line-format
		'((:eval
		   (mode-line-render
		    (format-mode-line (list
				       (format " %d " (winum-get-number)) ;; winum display
				       (propertize "☰" 'face `(:inherit mode-line-buffer-id)
						   'help-echo "Mode(s) menu"
						   'mouse-face 'mode-line-highlight
						   'local-map   mode-line-major-mode-keymap)
				       " %b "
				       (if (and buffer-file-name (buffer-modified-p))
					   (propertize "(modified)" 'face `(:inherit face-faded)))))
		    (format-mode-line
		     (propertize "%4l:%2c" 'face `(:inherit face-faded)))))))
#+END_SRC
